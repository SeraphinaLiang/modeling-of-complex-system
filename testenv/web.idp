// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t

    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors

    // Fluents
    ElPosition(Time):Floor				// The floor of the elevator at time point t
    ElDoorState(Time):DoorState			// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t

    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed

    type HandleStep constructed from {A,B} // step A - opening door,step B - closing door
    HandlingDoor(Time,Floor,HandleStep)   // contains 2 step A and B

    // elevator movement
    MovingFloor(Time,Floor) // moving to the specific floor if not at that specfic floor
    ChangeMovingFloor(Time,Floor) // change the target floor to move to

    AnsweredRequest(Time,Floor) // when the UnansweredRequest for the floor been answered,it becomes an AnsweredRequest

    // ElPosition(Time):Floor
    I_ElPosition:Floor
    C_ElPosition(Time,Floor)
    Cn_ElPosition(Time,Floor)

    // ElDoorState(Time):DoorState
    I_ElDoorState:DoorState
    C_ElDoorState(Time,DoorState)
    Cn_ElDoorState(Time,DoorState)

    // for actions performed by elevator
    type Action constructed from {GoingUp, GoingDown, OpenDoor, CloseDoor}
    do(Time,Action) // perform the action

    // constants
    MaxFloor:Floor // specific the maximal and minimal floor
    MinFloor:Floor

    // action state of elevator
    type ActionState constructed from{Still,Up,Down} 
    State(Time,ActionState)  // the movement status of elevator
    I_State:ActionState
    C_State(Time,ActionState)
    Cn_State(Time,ActionState)

    ChangeState(Time,ActionState) // change the movement status of the elevator

    type Number = {0..30} isa nat // helper type to calculate the distance between targeted floor and current position
    DistantUp(Time,Floor,Number)
    DistantDown(Time,Floor,Number)
    DistantAll(Time,Floor,Number)

}

// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student:V_student {
    {
        // initial value
        MaxFloor = MAX[:Floor].
        MinFloor = MIN[:Floor].
        I_ElPosition = MIN[:Floor].
        I_ElDoorState = Closed.
        I_State = Still.
    }
    // State init
    {
        State(Start,I_State).
        ! t[Time] s[ActionState]: State(Next(t),s) <- C_State(t,s).
        ! t[Time] s[ActionState]: State(Next(t),s) <- State(t,s) & ~Cn_State(t,s).
    }
    // State alter
    {
        ! t[Time] s[ActionState]: C_State(t,s) <- ChangeState(t,s).
        ! t[Time] : C_State(t,Up) <- do(t,GoingUp). // when elevator going up, the State change to Up.
        ! t[Time] : C_State(t,Down) <- do(t,GoingDown). // when elevator going down, the State change to Down.
        ! t[Time] s[ActionState]: Cn_State(t,s) <- ? s1[ActionState]: C_State(t,s1)& s ~= s1.
    }    
    // ElPosition init
    {
        ElPosition(Start) = I_ElPosition.
        ! t[Time] n[Floor] : ElPosition(Next(t)) = n <- C_ElPosition(t,n).
        ! t[Time] n[Floor] : ElPosition(Next(t)) = n <- ElPosition(t)=n & ~Cn_ElPosition(t,n).
    }
    // ElPosition alter
    {
        ! t[Time] n[Floor] : C_ElPosition(t,n+1) <- do(t,GoingUp) & ElPosition(t) = n.// move one floor up
        ! t[Time] n[Floor] : C_ElPosition(t,n-1) <- do(t,GoingDown) & ElPosition(t) = n. // move one floor down
        ! t[Time] n[Floor] : Cn_ElPosition(t,n)  <- ? m[Floor] : C_ElPosition(t,m) & m ~= n.
    }
    // ElDoorState init
    {
        ElDoorState(Start) = I_ElDoorState.
        ! t[Time] s[DoorState]: ElDoorState(Next(t))=s <- C_ElDoorState(t,s).
        ! t[Time] s[DoorState]: ElDoorState(Next(t))=s <- ~Cn_ElDoorState(t,s)& ElDoorState(t)=s.
    }
    // ElDoorState alter
    {
        ! t[Time] : C_ElDoorState(t,Open) <- do(t,OpenDoor) & ElDoorState(t)=Closed.
        ! t[Time] : C_ElDoorState(t,Closed) <- do(t,CloseDoor) & ElDoorState(t)=Open.
        ! t[Time] p[DoorState]: Cn_ElDoorState(t,p) <- ? q[DoorState]: C_ElDoorState(t,q) & p~=q.
    }    
    {
        // MakeRequest(t,f) only effect when UnansweredRequest(t,f) do not hold ,MakeRequest(Time, Floor) generates UnansweredRequest(Time, Floor)
        ! t[Time] f[Floor] : UnansweredRequest(Next(t),f) <- MakeRequest(t,f) & ~ UnansweredRequest(t,f).
        // UnansweredRequest proceed to t+1 until it has been fulfilled
        ! t[Time] f[Floor]: UnansweredRequest(Next(t),f) <- UnansweredRequest(t,f) & ~ AnsweredRequest(t,f).

        // when targeted floor > current position, elevator move one floor up
        ! t[Time] f1[Floor] f2[Floor] : do(t,GoingUp) <- MovingFloor(t,f1) & ElPosition(t)=f2 & f1>f2.
        // when targeted floor < current position, elevator move one floor down
        ! t[Time] f1[Floor] f2[Floor] : do(t,GoingDown) <- MovingFloor(t,f1) & ElPosition(t)=f2 & f1<f2.

        // MovingFloor proceed to t+1 when current floor do not match the target floor, and there is no ChangeMovingFloor request at t
        ! t[Time] f1[Floor] f3[Floor]: MovingFloor(Next(t),f1) <- MovingFloor(t,f1) & ElPosition(t)=f3 & f1~=f3 & ~? f2[Floor]:(ChangeMovingFloor(t,f2) & f1 ~= f2).
        // change the target floor to move to
        ! t[Time] f[Floor] : MovingFloor(Next(t),f) <- ChangeMovingFloor(t,f).
        // when the target floor = elevator position, proceed to next step (open and close door)
        ! t[Time] f1[Floor] f2[Floor]: HandlingDoor(t,f1,A) <- MovingFloor(t,f1) & ElPosition(t)=f2 & f1=f2.

        // in step A, the door been open
        ! t[Time] f[Floor]: do(t,OpenDoor) <- HandlingDoor(t,f,A).
        // step A trigger step B in next time point
        ! t[Time] f[Floor]: HandlingDoor(Next(t),f,B) <- HandlingDoor(t,f,A).
        // in step B, the door been close
        ! t[Time] f[Floor]: do(t,CloseDoor) <- HandlingDoor(t,f,B).
        // after closed the door, the request at this floor is answered.
        ! t[Time] f[Floor]: AnsweredRequest(Next(t),f) <- HandlingDoor(t,f,B).  

        //----------calculate minimun distant-------------------------------
        /* 
        find the UnansweredRequest with the targeted floor closest(above or equals) to the current position,
        find the targeted floor and distance with those property at time t
        */
        ! t[Time] f0[Floor] b0[Number]:DistantUp(t,f0,b0)<- ( ! f[Floor] : ? fmin[Floor] pos[Number] a[Number] b[Number]: 
        UnansweredRequest(t,f)& UnansweredRequest(t,fmin)& (ElPosition(t)=pos) &
        (f >= pos) & (fmin >= pos) &
        (f-pos = a) & (fmin-pos = b) & (a >= b)
        & (fmin = f0) & (b = b0)).

        /*
        find the UnansweredRequest with the targeted floor closest(below) to the current position
        find the targeted floor and distance with those property at time t
        */
        ! t[Time] f0[Floor] b0[Number]:DistantDown(t,f0,b0) <-  (! f[Floor] : ? fmax[Floor] pos[Number] a[Number] b[Number]: 
        UnansweredRequest(t,f)& UnansweredRequest(t,fmax)& ElPosition(t)=pos &
        (f < pos) & (fmax < pos) &
        (pos-f = a) & (pos-fmax = b) & (a >= b)
        & (fmax = f0) & (b = b0)).

        /*
        find the smallest distance between all unanswered request and current position
        calculate for time t, the targeted floor and the shortest distance based on the previous calculation
        */
        // no request below current floor, only consider request above in this case
        ! t[Time] f[Floor] d[Number]: DistantAll(t,f,d) <- (~? f1[Floor] d1[Number]:DistantDown(t,f1,d1)) & DistantUp(t,f,d).
        // no request above current floor, only consider request below in this case
        ! t[Time] f[Floor] d[Number]: DistantAll(t,f,d) <- (~? f1[Floor] d1[Number]:DistantUp(t,f1,d1)) & DistantDown(t,f,d).
        // the request above is with smaller (or equal) distance to the request below
        ! t[Time] f[Floor] f1[Floor] d[Number] d1[Number]: DistantAll(t,f,d) <- DistantUp(t,f,d) & DistantDown(t,f1,d1) & d =< d1. // if equals, move up
        // the request below is with smaller distance to the request above
        ! t[Time] f[Floor] f1[Floor] d[Number] d1[Number]: DistantAll(t,f,d) <- DistantDown(t,f,d) & DistantUp(t,f1,d1) & d < d1. 

        //-----------main logic----------------------------------------------    
        // when the elevator stay still, move to the cloest floor
        ! t[Time] f[Floor] d[Number]: ChangeMovingFloor(t,f) <- DistantAll(t,f,d) & State(t,Still).

        // when the elevator is moving up, it finish all request above or equals to its current floor before goes down
        ! t[Time] f[Floor] d[Number]: ChangeMovingFloor(t,f) <- DistantUp(t,f,d) & State(t,Up) .   
        // when there is no request above but has request below its current floor, the elevator state change to Down
        ! t[Time] f[Floor] : ChangeState(t,Down) <- State(t,Up) &( ? f1[Floor] d1[Number]:DistantDown(t,f1,d1)) & (~? f2[Floor] d2[Number]:DistantUp(t,f2,d2)).
        // when there is no request anymore, the elevator stay still
        ! t[Time] f[Floor] : ChangeState(t,Still) <- State(t,Up) & (~? f1[Floor] d1[Number]:DistantDown(t,f1,d1)) & (~? f2[Floor] d2[Number]:DistantUp(t,f2,d2)).

        // corrosponding to state Up above, the same explanations with state Down
        ! t[Time] f[Floor] d[Number]: ChangeMovingFloor(t,f) <- DistantDown(t,f,d) & State(t,Down).
        ! t[Time] f[Floor] : ChangeState(t,Up) <- State(t,Down) & (? f1[Floor] d1[Number]:DistantUp(t,f1,d1)) & (~? f2[Floor] d2[Number]:DistantDown(t,f2,d2)).
        ! t[Time] f[Floor] : ChangeState(t,Still) <- State(t,Down) & (~? f1[Floor] d1[Number]:DistantDown(t,f1,d1)) & (~? f2[Floor] d2[Number]:DistantUp(t,f2,d2)).    
    }

    // only one(or zero) shorest distance and one(or zero) specific floor with that distance is found at every time point T
    ! t[Time] : ?=<1 f[Floor] d[Number]:DistantUp(t,f,d).
    ! t[Time] : ?=<1 f[Floor] d[Number]:DistantDown(t,f,d).
    ! t[Time] : ?=<1 f[Floor] d[Number]:DistantAll(t,f,d).

    // elevator going up and down only with closed door and not the Top/Button floor.
    ! t[Time] f[Floor]: do(t,GoingUp) & ElPosition(t)=f  => ElDoorState(t) = Closed & f ~= MaxFloor.
    ! t[Time] f[Floor]: do(t,GoingDown) & ElPosition(t)=f => ElDoorState(t) = Closed & f ~= MinFloor.
    // alter at most one property
    ! t[Time] : ?=<1 a[Action] : do(t,a).

}

// if elevator moves the door are closed
theory move_inv : V_student{
    ! t[Time]: do(t,GoingUp) => ElDoorState(t) = Closed.
    ! t[Time]: do(t,GoingDown) => ElDoorState(t) = Closed.
}

// doors are never open if there is no call waiting on that floor
theory door_inv : V_student{
    ! t[Time] f[Floor]: (ElDoorState(t) = Open & ElPosition(t)=f) => UnansweredRequest(t,f).
}

Structure S_Inv:V_student{
    Time={0..20}
    Floor={0..5}
    Start = 0
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}



//Include tests

// The elevator does not move if there are no requests and doors are Closed()
structure S_t_1 : V_student {
	Time = { 0..3 }
    Floor = {0..2}
    MakeRequest = {}
}

// Single request at the start
structure S_t_2 : V_student {
    Time = { 0..5 }
    Floor = {0..2}
    MakeRequest = {0,1;}
}

// The request appears on the elevators way
structure S_t_3 : V_student {
    Time = { 0..5 }
    Floor = {0..2}
    MakeRequest = {0,2;1,1;}
}

// The request appears below while the elevator goes up
structure S_t_4 : V_student {
    Time = { 0..5 }
    Floor = {0..2}
    MakeRequest = {0,2;1,0;}
}

// Correct behavior check
structure S_t_5 : V_student {
    Time = {0..20}
    Floor = {0..9}
    MakeRequest = {0, 4; 5, 2; 5, 7}
}

// Correct behavior check and efficiency
structure S_t_6 : V_student {
    Time = {0..30}
    Floor = {0..9}
    MakeRequest = {0, 4; 6, 2; 6, 7; 7, 8; 7, 9}
}

// Correct behavior check and efficiency
structure S_t_7 : V_student {
    Time = {0..30}
    Floor = {0..9}
    MakeRequest = {0, 4; 7, 4; 3, 7}
}

// Checking efficiency
structure S_t_8 : V_student {
    Time = {0..50}
    Floor = {0..9}
    MakeRequest = {0, 2; 0, 6; 2, 4; 3, 7; 8, 3; 9, 4; 17, 9; 19, 0; 19, 1; 44, 7}
}


//CORRECT STRUCTURES FOR PROPOSED SCENARIOS

structure S_t_1_sol : V_fixed {
    Floor = { 0..2 }
    Time = { 0..3 }
    MakeRequest = {  }
    UnansweredRequest = {  }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed() }
    ElPosition = { 0,0; 1,0; 2,0; 3,0 }
    Next = { 0,1; 1,2; 2,3 }
    Start = 0
}

structure S_t_2_sol : V_fixed {
    Floor = { 0..2 }
    Time = { 0..5 }
    MakeRequest = { 0,1 }
    UnansweredRequest = { 1,1; 2,1; 3,1 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Open(); 4,Closed(); 5,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,1; 4,1; 5,1 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5 }
    Start = 0
}

structure S_t_3_sol : V_fixed {
    Floor = { 0..2 }
    Time = { 0..5 }
    MakeRequest = { 0,2; 1,1 }
    UnansweredRequest = { 1,2; 2,1; 2,2; 3,1; 3,2; 4,2; 5,2 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Open(); 4,Closed(); 5,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,1; 4,1; 5,2 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5 }
    Start = 0
}

structure S_t_4_sol : V_fixed {
    Floor = { 0..2 }
    Time = { 0..5 }
    MakeRequest = { 0,2; 1,0 }
    UnansweredRequest = { 1,2; 2,0; 2,2; 3,0; 3,2; 4,0; 4,2; 5,0 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed(); 4,Open(); 5,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,2; 4,2; 5,2 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5 }
    Start = 0
}

structure S_t_5_sol : V_fixed {
    Floor = { 0..9 }
    Time = { 0..20 }
    MakeRequest = { 0,4; 5,2; 5,7 }
    UnansweredRequest = { 1,4; 2,4; 3,4; 4,4; 5,4; 6,2; 6,4; 6,7; 7,2; 7,7; 8,2; 8,7; 9,2; 9,7; 10,2; 10,7; 11,2; 11,7; 12,2; 13,2; 14,2; 15,2; 16,2; 17,2; 18,2 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed(); 4,Closed(); 5,Closed(); 6,Open(); 7,Closed(); 8,Closed(); 9,Closed(); 10,Closed(); 11,Open(); 12,Closed(); 13,Closed(); 14,Closed(); 15,Closed(); 16,Closed(); 17,Closed(); 18,Open(); 19,Closed(); 20,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,2; 4,3; 5,4; 6,4; 7,4; 8,5; 9,6; 10,7; 11,7; 12,7; 13,6; 14,5; 15,4; 16,3; 17,2; 18,2; 19,2; 20,2 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5; 5,6; 6,7; 7,8; 8,9; 9,10; 10,11; 11,12; 12,13; 13,14; 14,15; 15,16; 16,17; 17,18; 18,19; 19,20 }
    Start = 0
}

structure S_t_6_sol : V_fixed {
    Floor = { 0..9 }
    Time = { 0..30 }
    MakeRequest = { 0,4; 6,2; 6,7; 7,8; 7,9 }
    UnansweredRequest = { 1,4; 2,4; 3,4; 4,4; 5,4; 6,4; 7,2; 7,7; 8,2; 8,7; 8,8; 8,9; 9,2; 9,7; 9,8; 9,9; 10,2; 10,7; 10,8; 10,9; 11,2; 11,7; 11,8; 11,9; 12,2; 12,8; 12,9; 13,2; 13,8; 13,9; 14,2; 14,8; 14,9; 15,2; 15,9; 16,2; 16,9; 17,2; 17,9; 18,2; 19,2; 20,2; 21,2; 22,2; 23,2; 24,2; 25,2; 26,2 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed(); 4,Closed(); 5,Closed(); 6,Open(); 7,Closed(); 8,Closed(); 9,Closed(); 10,Closed(); 11,Open(); 12,Closed(); 13,Closed(); 14,Open(); 15,Closed(); 16,Closed(); 17,Open(); 18,Closed(); 19,Closed(); 20,Closed(); 21,Closed(); 22,Closed(); 23,Closed(); 24,Closed(); 25,Closed(); 26,Open(); 27,Closed(); 28,Closed(); 29,Closed(); 30,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,2; 4,3; 5,4; 6,4; 7,4; 8,5; 9,6; 10,7; 11,7; 12,7; 13,8; 14,8; 15,8; 16,9; 17,9; 18,9; 19,8; 20,7; 21,6; 22,5; 23,4; 24,3; 25,2; 26,2; 27,2; 28,2; 29,2; 30,2 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5; 5,6; 6,7; 7,8; 8,9; 9,10; 10,11; 11,12; 12,13; 13,14; 14,15; 15,16; 16,17; 17,18; 18,19; 19,20; 20,21; 21,22; 22,23; 23,24; 24,25; 25,26; 26,27; 27,28; 28,29; 29,30 }
    Start = 0
}

structure S_t_7_sol : V_fixed {
    Floor = { 0..9 }
    Time = { 0..30 }
    MakeRequest = { 0,4; 3,7; 7,4 }
    UnansweredRequest = { 1,4; 2,4; 3,4; 4,4; 4,7; 5,4; 5,7; 6,4; 6,7; 7,7; 8,4; 8,7; 9,4; 9,7; 10,4; 10,7; 11,4; 11,7; 12,4; 13,4; 14,4; 15,4; 16,4 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed(); 4,Closed(); 5,Closed(); 6,Open(); 7,Closed(); 8,Closed(); 9,Closed(); 10,Closed(); 11,Open(); 12,Closed(); 13,Closed(); 14,Closed(); 15,Closed(); 16,Open(); 17,Closed(); 18,Closed(); 19,Closed(); 20,Closed(); 21,Closed(); 22,Closed(); 23,Closed(); 24,Closed(); 25,Closed(); 26,Closed(); 27,Closed(); 28,Closed(); 29,Closed(); 30,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,2; 4,3; 5,4; 6,4; 7,4; 8,5; 9,6; 10,7; 11,7; 12,7; 13,6; 14,5; 15,4; 16,4; 17,4; 18,4; 19,4; 20,4; 21,4; 22,4; 23,4; 24,4; 25,4; 26,4; 27,4; 28,4; 29,4; 30,4 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5; 5,6; 6,7; 7,8; 8,9; 9,10; 10,11; 11,12; 12,13; 13,14; 14,15; 15,16; 16,17; 17,18; 18,19; 19,20; 20,21; 21,22; 22,23; 23,24; 24,25; 25,26; 26,27; 27,28; 28,29; 29,30 }
    Start = 0
}

structure S_t_8_sol : V_fixed {
    Floor = { 0..9 }
    Time = { 0..50 }
    MakeRequest = { 0,2; 0,6; 2,4; 3,7; 8,3; 9,4; 17,9; 19,0; 19,1; 44,7 }
    UnansweredRequest = { 1,2; 1,6; 2,2; 2,6; 3,2; 3,4; 3,6; 4,2; 4,4; 4,6; 4,7; 5,4; 5,6; 5,7; 6,4; 6,6; 6,7; 7,4; 7,6; 7,7; 8,4; 8,6; 8,7; 9,3; 9,6; 9,7; 10,3; 10,4; 10,6; 10,7; 11,3; 11,4; 11,6; 11,7; 12,3; 12,4; 12,6; 12,7; 13,3; 13,4; 13,7; 14,3; 14,4; 14,7; 15,3; 15,4; 15,7; 16,3; 16,4; 17,3; 17,4; 18,3; 18,4; 18,9; 19,3; 19,4; 19,9; 20,0; 20,1; 20,3; 20,4; 20,9; 21,0; 21,1; 21,3; 21,9; 22,0; 22,1; 22,3; 22,9; 23,0; 23,1; 23,3; 23,9; 24,0; 24,1; 24,9; 25,0; 25,1; 25,9; 26,0; 26,1; 26,9; 27,0; 27,1; 27,9; 28,0; 28,9; 29,0; 29,9; 30,0; 30,9; 31,9; 32,9; 33,9; 34,9; 35,9; 36,9; 37,9; 38,9; 39,9; 40,9; 41,9; 45,7; 46,7; 47,7; 48,7 }
    ElDoorState = { 0,Closed(); 1,Closed(); 2,Closed(); 3,Closed(); 4,Open(); 5,Closed(); 6,Closed(); 7,Closed(); 8,Open(); 9,Closed(); 10,Closed(); 11,Closed(); 12,Open(); 13,Closed(); 14,Closed(); 15,Open(); 16,Closed(); 17,Closed(); 18,Closed(); 19,Closed(); 20,Open(); 21,Closed(); 22,Closed(); 23,Open(); 24,Closed(); 25,Closed(); 26,Closed(); 27,Open(); 28,Closed(); 29,Closed(); 30,Open(); 31,Closed(); 32,Closed(); 33,Closed(); 34,Closed(); 35,Closed(); 36,Closed(); 37,Closed(); 38,Closed(); 39,Closed(); 40,Closed(); 41,Open(); 42,Closed(); 43,Closed(); 44,Closed(); 45,Closed(); 46,Closed(); 47,Closed(); 48,Open(); 49,Closed(); 50,Closed() }
    ElPosition = { 0,0; 1,0; 2,1; 3,2; 4,2; 5,2; 6,3; 7,4; 8,4; 9,4; 10,5; 11,6; 12,6; 13,6; 14,7; 15,7; 16,7; 17,6; 18,5; 19,4; 20,4; 21,4; 22,3; 23,3; 24,3; 25,2; 26,1; 27,1; 28,1; 29,0; 30,0; 31,0; 32,1; 33,2; 34,3; 35,4; 36,5; 37,6; 38,7; 39,8; 40,9; 41,9; 42,9; 43,9; 44,9; 45,9; 46,8; 47,7; 48,7; 49,7; 50,7 }
    Next = { 0,1; 1,2; 2,3; 3,4; 4,5; 5,6; 6,7; 7,8; 8,9; 9,10; 10,11; 11,12; 12,13; 13,14; 14,15; 15,16; 16,17; 17,18; 18,19; 19,20; 20,21; 21,22; 22,23; 23,24; 24,25; 25,26; 26,27; 27,28; 28,29; 29,30; 30,31; 31,32; 32,33; 33,34; 34,35; 35,36; 36,37; 37,38; 38,39; 39,40; 40,41; 41,42; 42,43; 43,44; 44,45; 45,46; 46,47; 47,48; 48,49; 49,50 }
    Start = 0
}

// Structure for testing
Structure S_Invariant:V_student {
    Time = {0..20}
    Floor = {0..5}
    Start = 0
}

// If the elevator moves the doors are closed!
theory inv_1 : V_student {
    ! t[Time] : (ElPosition(t) ~= ElPosition(Next(t))) => (ElDoorState(t) = Closed & ElDoorState(Next(t)) = Closed).
}

// Doors are only open when the elevator is answering a request
theory inv_2 : V_student {
    ! t[Time] : ElDoorState(t) = Open => UnansweredRequest(t, ElPosition(t)).
}

// Taking into account inv_2, if doors are open there is no unanswered request on that floor at the next time point.
theory inv_3 : V_student {
    ! t[Time] : ElDoorState(t) = Open => ~UnansweredRequest(Next(t), ElPosition(t)).
}

// Taking into account inv_2 it is entailed that doors are never open for two consecutive time points
theory inv_4 : V_student {
    ! t[Time] : ElDoorState(t) = Open => ElDoorState(Next(t)) = Closed.
}

// Make request results in a new UnansweredRequest (if it is not already unanswered)
theory inv_5 : V_student {
    ! t[Time] : ! f[Floor] : (MakeRequest(t, f) & ~UnansweredRequest(t,f)) => UnansweredRequest(Next(t),f) .
}


//Arg: t - Theory, s - Structure 
procedure check_invariant(name, t, s, inv){
    bool_to_number={ [true]=1, [false]=0 }
    
    sol = isinvariant(t, inv, s)
    
    print(name, ",", sol, ",", "-", ",", "-", ",", bool_to_number[sol])
}


//Arg: t - Theory, s - Structure 
procedure check_sat(name, t, s, negate){
    bool_to_number={ [true]=1, [false]=0 }
    
    sol = sat(t,s)
    
    if negate == true then sol = not sol end
    
    print(name, ",", sol, ",", "-", ",", "-", ",", bool_to_number[sol])
}


//Arg: t - Theory, s - Structure, v - Vocabulary, cs - Correct structure, nm - Number of models
procedure compare_structures_and_number_of_models(name, t, s, v, cs){

    stdoptions.nbmodels = 2
    
    local sols = modelexpand(t,s,v)
    
    local eq_number_of_models = equal(1, #sols)
    
    local eq_first_model = false

    if #sols == 1 then eq_first_model = equal(cs, sols[1]) end
    if #sols == 2 then eq_first_model = equal(cs, sols[1]) or equal(cs, sols[2]) end
    
    local points = 0
    if eq_number_of_models == true then points = points + 0.5 end
    if eq_first_model == true then points = points + 0.5 end

    print(name, ",", eq_number_of_models, ",", #sols, ",", eq_first_model, ",", points )      

}

procedure main(test){

    local completeTheory = merge(T_fixed, T_student)

    stdoptions.timeout = 70
    
    if (test == "Scenario 1") then 
        compare_structures_and_number_of_models(test, completeTheory, S_t_1, V_fixed, S_t_1_sol)
    elseif (test == "Scenario 2") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_2, V_fixed, S_t_2_sol)
    elseif (test == "Scenario 3") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_3, V_fixed, S_t_3_sol)
    elseif (test == "Scenario 4") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_4, V_fixed, S_t_4_sol)
    elseif (test == "Scenario 5") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_5, V_fixed, S_t_5_sol)
    elseif (test == "Scenario 6") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_6, V_fixed, S_t_6_sol)
    elseif (test == "Scenario 7") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_7, V_fixed, S_t_7_sol)
    elseif (test == "Scenario 8") then
        compare_structures_and_number_of_models(test, completeTheory, S_t_8, V_fixed, S_t_8_sol)
    elseif (test == "Invariant 1") then
        check_invariant(test, T_student, S_Invariant, inv_1)
    elseif (test == "Invariant 2") then
        check_invariant(test, T_student, S_Invariant, inv_2)
    elseif (test == "Invariant 3") then
        check_invariant(test, merge(T_student, inv_2), S_Invariant, inv_3)
    elseif (test == "Invariant 4") then
        check_invariant(test, merge(T_student, inv_2), S_Invariant, inv_4)
    elseif (test == "Invariant 5") then
        check_invariant(test, T_student, S_Invariant, inv_5)
    end
}