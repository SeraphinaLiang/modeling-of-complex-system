vocabulary V {
	type Node
	Edge(Node, Node) //predicate
	EdgeOnPath(Node, Node)
	Start:Node // Constant
	End:Node
   Reach(Node)
}

theory PathTheory : V {
	// Theory expressing that EdgeOnPath is a path:
    !x y:EdgeOnPath(x,y) => Edge(x,y).
	// EdgeOnPath consists of a subset of the edges that together form a loopfree path from Start to End,
	// i.e., no loops, no splittings or edges coming together
    // and it starts in Start and ends in End
    !x:~EdgeOnPath(x,Start).
    !y:~EdgeOnPath(End,y).
//each node on the path has at most one incoming and outgoing //edge)
    !x :#{y:EdgeOnPath(x,y)}=<1.
    !y :#{x:EdgeOnPath(x,y)}=<1.
    
    {
        Reach(Start).
        !x y:Reach(y) <- Reach(x)&EdgeOnPath(x,y).
    }
    Reach(End).
    
}

term Length : V {
	# {x y:EdgeOnPath(x,y)}
}

structure S : V {
	Node = {1..7}
	Edge = {1,2;2,3;3,4;4,5;5,2;5,1;4,2;2,5;6,7}
	Start = 1
	End = 5
}

include <mx>

procedure main() {
	stdoptions.nbmodels = 0
	printmodels(minimize(PathTheory, S, Length))
}
